<?php

namespace Sdz\BlogBundle\Entity;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindAll()
    {
        return $this->createQueryBuilder('a')->getQuery()->getResult();
    }

    public function myFindOne($id)
    {
        $qb = $this->_em->createQueryBuilder(); // $qb vide
        $qb->select('a')
           ->from('SdzBlogBundle:Article', 'a')
           ->where('a.id = :id')
           ->setParameter('id', $id);

        return $qb->getQuery()->getResult();
    }

    public function findByAuthorAndDate($author, $annee)
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.author = :author')
           ->setParameter('author', $author)
           ->andWhere('a.date < :annee')
           ->setParameter('annee', $annee)
           ->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    // Articles postés durant l'année en cours
    public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
    {
        $qb->andWhere('a.date BETWEEN :start AND :end')
           ->setParameter('start', new \Datetime(date('Y').'-01-01'))
           ->setParameter('end', new \Datetime(date('Y').'-12-31'));

        return $qb;
    }

    public function findByAuthorCurrentYear($author)
    {
        $qb =$this->createQueryBuilder('a');
        $qb->where('a.author = :author')
           ->setParameter('author', $author);

        $qb = $this->whereCurrentYear($qb);

        $qb->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getArticlesWithCategories(array $categorieNames) {
        $qb = $this->createQueryBuilder('a');
        $qb->join('a.categories', 'c')
           ->andWhere($qb->exp()->in('c.name', $categorieNames)); // Permet de filtrer sur les noms des catégories

        return $qb->getQuery()->getResult();
    }

    // Optimisation (faire des jointures)
    public function getArticles($nbPerPage, $page)
    {
        // Test sur l'argument $page
        if ($page < 1) {
            throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "' . $page . '").');
        }

        $qb = $this->createQueryBuilder('a');
        // On joint sur l'attribut image
        $qb->leftJoin('a.image', 'i');
        $qb->addSelect('i');
        // On joint sur l'attribut categories
        $qb->leftJoin('a.categories', 'cat');
        $qb->addSelect('cat');
        // On joint sur l'attribut commentaires
        $qb->leftJoin('a.commentaires', 'com');
        $qb->addSelect('com');
        $qb->orderBy('a.date', 'DESC');

        $query = $qb->getQuery();

        // On doit définir l'article à partir duquel commence la liste (par page): $offset
        // $page >= 1
        $offset = ($page - 1) * $nbPerPage;
        $query->setFirstResult($offset);
        $query->setMaxResults($nbPerPage);

        // return $query->getResult();
        return new Paginator($query);
    }
}

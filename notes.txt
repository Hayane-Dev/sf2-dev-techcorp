Symfony 2.7.48
**************

Stack (symfony 2.7.48 / php 7.1.9 / composer 1.5.2)

Dans ce framework tout est bundle (paquet, brique...), l'application, les composants externes et même la distribution standard.

Un bundle peut servir à tout. On écrira les nôtres pour y inclure notre code métier.
Bundles notables:
	+ FosUserBundle: il fournit une gestion d'utilisateur complète (inscription, connexion, mdp perdu...)
	+ SonataAdminBundle: il génère facilement les pages de l'interface d'administration à partir du modèle de données  
	  utilisé.
	+ FosRestBundle: il simplifie la mise en oeuvre d'API REST dans les applications
	+ KnpPaginatorBundle: il simplifie et uniformise la gestion des tris et de la pagination des données sous toutes leurs formes.

NB: Sources de bundles http://knpbundles.com/

Un bundle vit en autonomie
On doit penser un bundle de manière totalement autonome et on doit le configurer dans l'application pour le faire fonctionner avec les autres.
Implication: 2 bundles ne peuvent partager des classes ou des informations...

Création d'un bundle: php app/console generate:bundle

Fichier de mapping (nomDuBundle/Resource/config/routing.yml) -> définition des routes...
Une route fait la correspondance entre une URL et un contrôleur à appeler.

Le profiler -> géré par le webProfilerBundle (possède ses propres routes)

Résolution des problèmes
************************

Problème relatif aux bundles (err: Attemp to load class  ... kernel)
--------------------------------------------------------------------
Dans composer.json: "": "/src"
puis composer dump-autoload et composer install

"AppBundle\\": "src/AppBundle",
"TechCorpFrontBundle\\": "src/TechCorp/FrontBundle",

Problème relatif aux routes (Not route found for ...)
----------------------------------------------------
"No route found for "GET /dsz/hello"
Il manquait le renseignement du paramètre name...

Revolute ... alias adresse mail

Vider le cache 
manuellement -> delete folder app/cache/dev
sinon php app\console cache:clear (en prod on ajoute --env=prod)

SwiftMailer dépendance envoi de mail

php app/console doctrine:generate:entity
	-> génération d'une entité
php app/console doctrine:database:create
	-> créer la database
php app/console doctrine:schema:update --dump-sql
	-> requête sql du différentiel entre la base et les entités
php app/console doctrine:schema:update --force
	-> exécute la dite requête

php app/console doctrine:generate:entities SdzBlogBundle:Article
	-> modification d'une entité
	-> génère les getters et les setters

Le service Doctrine 2
	$doctrine = $this->get('doctrine');
		ou
	$doctrine = $this->getDoctrine();

Le service EntityManager
	$em = $this->getDoctrine()->getManager();
		ou
	$em = $this->get('doctrine.orm.entity_manager');

Les services Repository
	$em = $this->getDoctrine()->getManager();
	$repositoryArticle = $em->getRepository('SdzBlogBundle:Article');
		ou
	$repositoryArticle = $em->getRepository('Sdz\BlogBundle\Entity\Article');	
	Ex: $article = $repositoryArticle->find($id)

Les autres méthodes utiles de l'EntityManger EM ($em->method())
	- clear(): annule tous les persist effectués
	- detach(entity): annule le persist sur l'entité passée en argument
	- contains(entity): retourne true si l'entité passée en argument est gérée par l'EM, i;e, si un persist est en cours
	- refresh(entity): met à jour l'entité passée en argument dans l'état où elle est en DB
	- remove(entity): supprime l'entité passée en argument de la DB

Rq: Syntaxe possible sans passer par le Repository
	Ex: $article = $em->find('SdzBlogBundle:Article', $id)

***************************************************
*** Les relations entre entités avec Doctrine 2 ***
***************************************************

Relations OneToOne, OneToMany et ManyToMany
Dans une relation entre 2 entités, il y a toujours une entité propriétaire et une entité inverse.
L'entité propriétaire est celle qui contient la référence à l'autre entité.

Ex: 2 entités, Article et Commentaire.
Un commentaire est rattaché à un article, l'entité Commentaire doit donc contenir la référence à l'entité Article. [En DB, dans la table commentaire, on aura une colonne article_id]

Relation unidirectionnelle et bidirectionnelle.
	+ unidirectionnelle, on pourra faire 
		$entityProprietaire->getEntityInverse() mais pas $entityInverse->getEntityProprietaire()
		Ex: $commentaire->getArticle() mais pas $article->getCommentaires()
	+ bidirectionnelle on peut faire 
		$entityProprietaire->getEntityInverse() et $entityInverse->getEntityProprietaire()
NB: $article->getCommentaires() implique une requête SQL
	Lorque l'on récupère un article, Doctrine ne récupère pas toutes les entités qui lui sont liées (les commentaires par ex). HEUREUSEMENT !!!
	Lourdeur !!! On veut récupérer un article pour son titre et Doctrine nous récupère les 54 commentaires qui en plus sont reliés à leurs 54 auteurs respectifs etc ...
	Pour remédier à cela, Doctrine utilise le Lazy Loading (chargement fainéant) : il va charger les entités à l'autre bout de la relation que si on veut accéder à ces entités. Typiquement c'est au moment où l'on fait $article->getCommentaires() que Doctrine va charger les commentaires via une nouvelle requête SQL...
	
	1) Relation ONE-TO-ONE
		Un article est associé à une seule image 
		Une image n'est reliée qu'à un seul article
		Entité propriétaire Article (le choix est arbitraire mais plus logique)

		

	2) Relation MANY-TO-ONE
		Un article est associé à plusieurs commentaires
		Un commentaire concerne un seul article
		Entité propriétaire Commentaire et Aritcle entité inverse

	3) Relation MANY-TO-MANY
		Un article peut appartenir à plusieurs catégories
		Une catégorie peut contenir plusieurs articles

		Entité propriétaire sera Article et donc l'entité inverse Categorie
		L'entité Article contient un attribut categories au pluriel destiné à contenir une liste d'objet...
		Les listes d'objets dans Doctrine 2 ne sont de simples tableaux, mais des ArrayCollection... possédant toutes les propriétés des tableaux (foreach, count, ...) mais possédant quelques méthodes supplémentaires utiles.

		Installation du bundle relatif aux fixtures

		composer cheatsheet

		"require": {
			"vendor/package": "1.3.2", // exactly 1.3.2 (exact)

			// >, <, >=, <= | specify upper / lower bounds
			"vendor/package": ">=1.3.2", // anything above or equal to 1.3.2
			"vendor/package": "<1.3.2", // anything below 1.3.2

			// * | wildcard
			"vendor/package": "1.3.*", // >=1.3.0 <1.4.0

			// ~ | allows last digit specified to go up
			"vendor/package": "~1.3.2", // >=1.3.2 <1.4.0
			"vendor/package": "~1.3", // >=1.3.0 <2.0.0

			// ^ | doesn't allow breaking changes (major version fixed - following semvar)
			"vendor/package": "^1.3.2", // >=1.3.2 <2.0.0
			"vendor/package": "^0.3.2", // >=0.3.2 <0.4.0 // except if major version is 0
		}

		[ symfony-composer-erreur-memoire-allouee (recherche google) ]

		Erreur mémoire allouée composer
			-> php -r "eval('?>'.file_get_contents('http://getcomposer.org/installer'));" Réinstallation

		Composer 1.9.0 version

		php -d memory_limit=-1 composer.phar update (résoud le pb...)

		Créer les répertoires DataFixtures\ORM et le fihcier C:\refacto\20190611\symfony-2.7\my_project_name\src\Sdz\BlogBundle\DataFixtures\ORM\Categories.php

		Exécuter la commande php app/console doctrine:fixtures:load 
			-- purge la base de données (efface toutes les données)
			on peut éviter cela, en faisant [ php app/console doctrine:fixtures:load --append ]

	4) Relation ManyToMany avec attributs

	L'astuce est de créer une entité intermédiaire et de créer 2 relation de type ManyToOne
	ex: Article [OneToMany] Article_Competence [ManyToOne] Competence
	L'entité intermédiaire sera porteuse de l'attribut level[Niveau] (de compétence en fonction de l'artilce)
	L'entité ArticleCompetence n'aura pas d'auto-incrément, l'id sera forgé avec les idArticle et les idCompetence (couple unique). Pour cela il faudra ajouter l'annotation @ORM\Id sur les colonnes article et competence.
	NB -> l'entité propriétaire dans les deux relations ManyToOne est l'entité ArticleCompetence [côté Many], donc on ne pourra pas faire des choses comme:
		- $article->getArticleCompetence()
		- $competence->getArticleCompetence()
		=> il faudra considérer les relations bidirectionnelles...
	
	Utilisation des fixtures pour alimenter la table Competence
	Idem que Categorie, création du Fichier Competences.php ds répertoire DataFixtures\ORM

	5) Relation bidirectionnelle

	On reprend la relation Article Commentaire
	Au départ la relation est unidirectionnelle, entité propriétaire Commentaire et entité inverse Article
	La relation est du type ManyToOne (Many du côté propriétaire).

	Pour la rendre bidirectionnelle, il ajouter un attribut commentaires (pluriel, il y a en effet plusieurs commentaires possibles) à l'entité inverse Article.
	Il faut lui ajouter aussi l'annotation @ORM\OneToMany(targetEntity="Sdz\BlogBundle\Entity\Commentaire"),mappedBy="article".
	Du côté de l'entité propriétaire, il faut ajouter inversedBy="commentaires", correspond au symétrique de mappedBy="article".

	*********************************************
	*** Récupérer les entités avec Doctrine 2 ***
	*********************************************

	Un repository par entité, permet de bien organiser le code.
	Dans un repository, il existe 2 moyens de récupérer les données:
		- Le DQL 
			SELECT a FROM SdzBlogBundle:Article a
		- Le QueryBuilder
			querybuilder = qb
			$qb->select('a')->from('SdzBlogBundle:Article', 'a');
			Nb: Principal avantage est de pouvoir construire la requête en plusieurs fois
	
	Les repositories héritent de la classe Doctrine\ORM\EntityRepository qui propose quelques méthodes:
		- les méthodes normales
			+ find($id) : retourne l'entité d'id $id
			+ findAll() : retourne liste d'entités
			+ findBy(array $criteres, array $orderBy=null, $limite=null, $offset=null) : retourne liste d'entités (nb = $limite et borne inférieure du range $offset)
			+ findOneBy(array $criteres) : retourne une entité
		- les méthodes magiques
			+ findByX($valeur) : liste entités
			+ findOneByX($valeur) : une entité
	Les méthodes de récupération personnelles
		QB: cf repo article

	La query :
		- $entities = $qb->getQuery()->getResult()
			Tableau d'objets
		- ...getArrayResult()
			Tableu de tableaux (plus rapide, juste pour l'affichage)
		- ...getScalarResult()
		- ...getOneOrNullResult()
		- ...getSingleResult()
		- ...getSingleScalarResult()
		- ...execute() : toutes les autres méthodes sont en fait des raccourcis vers cette méthode, en changeant la méthode d'hydratation des résultats. On l'utilise essentiellement pour des requêtes qui ne requièrent pas de résultats (Update, insert ...)

	Utilisation du DQL : 
		- en ligne de commande : 
			+ php app/console doctrine:query:dql "SELECT a FROM SdzBlogBundle:Article a"
			+ ... "SELECT a FROM Article a WHERE TRIM(a.author) = 'mek'"
			+ ... "SELECT a.titre FROM Article a WHERE a.id IN (10,11,12)
				[a.title entraine un résultat sous forme de tableaux et non de'objets]
		- On peut utiliser des paramètres via une fonction
			public function myFindDql($id) {
				// propriété _em de l'entityManager
				$sql = "SELECT a FROM SdzBlogBundle:Article a WHERE a.id = :id";
				$query = $this->_em->createQuery($sql);
				$query->setParameter('id', $id);
				// La requête ne doit renvoyer qu'un seul résultat
				return $query->getSingleResult();
			}

		Les jointures :
			- Avec le QueryBuilder:
				public function getArticlesWithCommentaires() {
					$qb = $this->createQueryBuilder('a');
							   ->leftJoin('a.commentaires', 'c')
							   ->addSelect('c');
					return $qb->getQuery()->getResult();  	
				}
				// On peut ajouter des conditions à la suite du on... avec la syntaxe du WITH
				$qb->Join('a.commentaires', 'c', 'WITH', 'YEAR(c.date) > 2011');
			- SQL\DQL
				SELECT * FROM Article a JOIN Commentaire c ON c.article = a.id AND YEAR(c.date) > 2011
				En DQL le ON n'existe pas seul le WITH est supporté !!!
				Grâce au With on a pas besoin de réécrire la condition de jointure le c.article = a.id ?????

		NB: Il est indispensable de faire les bonnes jointures afin de limiter au maximum le nombre de requêtes sur les pages

		
		Les Evénements et Extensions Doctrine

			1) Les événements Doctrine
				Ce sont les événements de cycle de vie car il s'agit d'événements que Doctrine lève à chaque moment de la vie d'une entité.
				Callbacks du cycle de vie (lifecycle) d'une entité.
				Ex : $dateEdition -> date de la dernière édition d'un article
				Crééer la propriété
				Dire à Doctrine que notre entité contient des Callbacks -> annotation [HasLifecycleCallbacks()]
				Mais auusi créér une methode updateDate() avec l'annotation @ORM\PreUpdate

				Liste des Evénements:
					- PrePersist et PostPersist
					- PreUpdate et PostUpdate
					- PreRemove et PostRemove
					- PostLoad

			2) Les extensions Doctrine
				La communauté a créé bon nombre d'extension réutilisable
				Philosophie DRY
				un bundle en particulier permet d'intégrer différentes extensions Doctrine dans un projet Symfony 2 -> StofDoctrineExtensionBundle
				composer [stof/doctrine-extensions-bundle V1.2.2]  php -d memory_limit=-1 composer.phar update
				Ne pas oublier de l'ajouter au niveau de app/AppKernel.php
				Ce bundle va permettre l'Utilisation des extensions.

				On va activer l'extension Sluggable
				Pour cela on va configurer le bundle précédent via le fichier app/config/config.yml
				Ensuite ajouter une propriété slug à notre entité (ex Article) avec les annotations
				suivantes:
				/** 
				 * @Gedmo\Slug(fields={"titre"}) 
				 * @ORM\Column(length=128, unique=true) 
				 */

				 Ne pas oublier le use Gedmo\Mapping\Annotation as Gedmo;




		
		Pratique : refactoriser les entités du Blog








	


